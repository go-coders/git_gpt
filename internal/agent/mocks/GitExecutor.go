// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/go-coders/git_gpt/internal/common"

	mock "github.com/stretchr/testify/mock"
)

// GitExecutor is an autogenerated mock type for the GitExecutor type
type GitExecutor struct {
	mock.Mock
}

type GitExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *GitExecutor) EXPECT() *GitExecutor_Expecter {
	return &GitExecutor_Expecter{mock: &_m.Mock}
}

// Commit provides a mock function with given fields: ctx, message
func (_m *GitExecutor) Commit(ctx context.Context, message string) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GitExecutor_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type GitExecutor_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
//   - message string
func (_e *GitExecutor_Expecter) Commit(ctx interface{}, message interface{}) *GitExecutor_Commit_Call {
	return &GitExecutor_Commit_Call{Call: _e.mock.On("Commit", ctx, message)}
}

func (_c *GitExecutor_Commit_Call) Run(run func(ctx context.Context, message string)) *GitExecutor_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GitExecutor_Commit_Call) Return(_a0 error) *GitExecutor_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GitExecutor_Commit_Call) RunAndReturn(run func(context.Context, string) error) *GitExecutor_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function with given fields: ctx, args
func (_m *GitExecutor) Execute(ctx context.Context, args ...string) (string, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) (string, error)); ok {
		return rf(ctx, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...string) string); ok {
		r0 = rf(ctx, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...string) error); ok {
		r1 = rf(ctx, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GitExecutor_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type GitExecutor_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - args ...string
func (_e *GitExecutor_Expecter) Execute(ctx interface{}, args ...interface{}) *GitExecutor_Execute_Call {
	return &GitExecutor_Execute_Call{Call: _e.mock.On("Execute",
		append([]interface{}{ctx}, args...)...)}
}

func (_c *GitExecutor_Execute_Call) Run(run func(ctx context.Context, args ...string)) *GitExecutor_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *GitExecutor_Execute_Call) Return(_a0 string, _a1 error) *GitExecutor_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GitExecutor_Execute_Call) RunAndReturn(run func(context.Context, ...string) (string, error)) *GitExecutor_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetDiff provides a mock function with given fields: ctx, staged
func (_m *GitExecutor) GetDiff(ctx context.Context, staged bool) (string, error) {
	ret := _m.Called(ctx, staged)

	if len(ret) == 0 {
		panic("no return value specified for GetDiff")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) (string, error)); ok {
		return rf(ctx, staged)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool) string); ok {
		r0 = rf(ctx, staged)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, staged)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GitExecutor_GetDiff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDiff'
type GitExecutor_GetDiff_Call struct {
	*mock.Call
}

// GetDiff is a helper method to define mock.On call
//   - ctx context.Context
//   - staged bool
func (_e *GitExecutor_Expecter) GetDiff(ctx interface{}, staged interface{}) *GitExecutor_GetDiff_Call {
	return &GitExecutor_GetDiff_Call{Call: _e.mock.On("GetDiff", ctx, staged)}
}

func (_c *GitExecutor_GetDiff_Call) Run(run func(ctx context.Context, staged bool)) *GitExecutor_GetDiff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *GitExecutor_GetDiff_Call) Return(_a0 string, _a1 error) *GitExecutor_GetDiff_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GitExecutor_GetDiff_Call) RunAndReturn(run func(context.Context, bool) (string, error)) *GitExecutor_GetDiff_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatus provides a mock function with given fields: ctx
func (_m *GitExecutor) GetStatus(ctx context.Context) ([]common.FileChange, []common.FileChange, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetStatus")
	}

	var r0 []common.FileChange
	var r1 []common.FileChange
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]common.FileChange, []common.FileChange, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []common.FileChange); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.FileChange)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) []common.FileChange); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]common.FileChange)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GitExecutor_GetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatus'
type GitExecutor_GetStatus_Call struct {
	*mock.Call
}

// GetStatus is a helper method to define mock.On call
//   - ctx context.Context
func (_e *GitExecutor_Expecter) GetStatus(ctx interface{}) *GitExecutor_GetStatus_Call {
	return &GitExecutor_GetStatus_Call{Call: _e.mock.On("GetStatus", ctx)}
}

func (_c *GitExecutor_GetStatus_Call) Run(run func(ctx context.Context)) *GitExecutor_GetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GitExecutor_GetStatus_Call) Return(staged []common.FileChange, unstaged []common.FileChange, err error) *GitExecutor_GetStatus_Call {
	_c.Call.Return(staged, unstaged, err)
	return _c
}

func (_c *GitExecutor_GetStatus_Call) RunAndReturn(run func(context.Context) ([]common.FileChange, []common.FileChange, error)) *GitExecutor_GetStatus_Call {
	_c.Call.Return(run)
	return _c
}

// IsGitRepository provides a mock function with given fields: ctx
func (_m *GitExecutor) IsGitRepository(ctx context.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsGitRepository")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GitExecutor_IsGitRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsGitRepository'
type GitExecutor_IsGitRepository_Call struct {
	*mock.Call
}

// IsGitRepository is a helper method to define mock.On call
//   - ctx context.Context
func (_e *GitExecutor_Expecter) IsGitRepository(ctx interface{}) *GitExecutor_IsGitRepository_Call {
	return &GitExecutor_IsGitRepository_Call{Call: _e.mock.On("IsGitRepository", ctx)}
}

func (_c *GitExecutor_IsGitRepository_Call) Run(run func(ctx context.Context)) *GitExecutor_IsGitRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GitExecutor_IsGitRepository_Call) Return(_a0 bool) *GitExecutor_IsGitRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GitExecutor_IsGitRepository_Call) RunAndReturn(run func(context.Context) bool) *GitExecutor_IsGitRepository_Call {
	_c.Call.Return(run)
	return _c
}

// StageAll provides a mock function with given fields: ctx
func (_m *GitExecutor) StageAll(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StageAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GitExecutor_StageAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StageAll'
type GitExecutor_StageAll_Call struct {
	*mock.Call
}

// StageAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *GitExecutor_Expecter) StageAll(ctx interface{}) *GitExecutor_StageAll_Call {
	return &GitExecutor_StageAll_Call{Call: _e.mock.On("StageAll", ctx)}
}

func (_c *GitExecutor_StageAll_Call) Run(run func(ctx context.Context)) *GitExecutor_StageAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GitExecutor_StageAll_Call) Return(_a0 error) *GitExecutor_StageAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GitExecutor_StageAll_Call) RunAndReturn(run func(context.Context) error) *GitExecutor_StageAll_Call {
	_c.Call.Return(run)
	return _c
}

// StageFiles provides a mock function with given fields: ctx, files
func (_m *GitExecutor) StageFiles(ctx context.Context, files []string) error {
	ret := _m.Called(ctx, files)

	if len(ret) == 0 {
		panic("no return value specified for StageFiles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, files)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GitExecutor_StageFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StageFiles'
type GitExecutor_StageFiles_Call struct {
	*mock.Call
}

// StageFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - files []string
func (_e *GitExecutor_Expecter) StageFiles(ctx interface{}, files interface{}) *GitExecutor_StageFiles_Call {
	return &GitExecutor_StageFiles_Call{Call: _e.mock.On("StageFiles", ctx, files)}
}

func (_c *GitExecutor_StageFiles_Call) Run(run func(ctx context.Context, files []string)) *GitExecutor_StageFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *GitExecutor_StageFiles_Call) Return(_a0 error) *GitExecutor_StageFiles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GitExecutor_StageFiles_Call) RunAndReturn(run func(context.Context, []string) error) *GitExecutor_StageFiles_Call {
	_c.Call.Return(run)
	return _c
}

// NewGitExecutor creates a new instance of GitExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitExecutor {
	mock := &GitExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
