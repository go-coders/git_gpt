// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// LLMClient is an autogenerated mock type for the LLMClient type
type LLMClient struct {
	mock.Mock
}

type LLMClient_Expecter struct {
	mock *mock.Mock
}

func (_m *LLMClient) EXPECT() *LLMClient_Expecter {
	return &LLMClient_Expecter{mock: &_m.Mock}
}

// Chat provides a mock function with given fields: ctx, content
func (_m *LLMClient) Chat(ctx context.Context, content string) (string, error) {
	ret := _m.Called(ctx, content)

	if len(ret) == 0 {
		panic("no return value specified for Chat")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, content)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, content)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LLMClient_Chat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Chat'
type LLMClient_Chat_Call struct {
	*mock.Call
}

// Chat is a helper method to define mock.On call
//   - ctx context.Context
//   - content string
func (_e *LLMClient_Expecter) Chat(ctx interface{}, content interface{}) *LLMClient_Chat_Call {
	return &LLMClient_Chat_Call{Call: _e.mock.On("Chat", ctx, content)}
}

func (_c *LLMClient_Chat_Call) Run(run func(ctx context.Context, content string)) *LLMClient_Chat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *LLMClient_Chat_Call) Return(_a0 string, _a1 error) *LLMClient_Chat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LLMClient_Chat_Call) RunAndReturn(run func(context.Context, string) (string, error)) *LLMClient_Chat_Call {
	_c.Call.Return(run)
	return _c
}

// ClearHistory provides a mock function with given fields:
func (_m *LLMClient) ClearHistory() {
	_m.Called()
}

// LLMClient_ClearHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearHistory'
type LLMClient_ClearHistory_Call struct {
	*mock.Call
}

// ClearHistory is a helper method to define mock.On call
func (_e *LLMClient_Expecter) ClearHistory() *LLMClient_ClearHistory_Call {
	return &LLMClient_ClearHistory_Call{Call: _e.mock.On("ClearHistory")}
}

func (_c *LLMClient_ClearHistory_Call) Run(run func()) *LLMClient_ClearHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LLMClient_ClearHistory_Call) Return() *LLMClient_ClearHistory_Call {
	_c.Call.Return()
	return _c
}

func (_c *LLMClient_ClearHistory_Call) RunAndReturn(run func()) *LLMClient_ClearHistory_Call {
	_c.Call.Return(run)
	return _c
}

// SetSystemMessage provides a mock function with given fields: message
func (_m *LLMClient) SetSystemMessage(message string) {
	_m.Called(message)
}

// LLMClient_SetSystemMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSystemMessage'
type LLMClient_SetSystemMessage_Call struct {
	*mock.Call
}

// SetSystemMessage is a helper method to define mock.On call
//   - message string
func (_e *LLMClient_Expecter) SetSystemMessage(message interface{}) *LLMClient_SetSystemMessage_Call {
	return &LLMClient_SetSystemMessage_Call{Call: _e.mock.On("SetSystemMessage", message)}
}

func (_c *LLMClient_SetSystemMessage_Call) Run(run func(message string)) *LLMClient_SetSystemMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *LLMClient_SetSystemMessage_Call) Return() *LLMClient_SetSystemMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *LLMClient_SetSystemMessage_Call) RunAndReturn(run func(string)) *LLMClient_SetSystemMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewLLMClient creates a new instance of LLMClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLLMClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *LLMClient {
	mock := &LLMClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
